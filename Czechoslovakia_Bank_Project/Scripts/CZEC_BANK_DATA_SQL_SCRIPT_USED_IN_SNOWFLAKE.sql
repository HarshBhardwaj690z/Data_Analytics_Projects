CREATE DATABASE HB_BANK;
USE HB_BANK;


CREATE TABLE DISTRICT(
District_Code INT PRIMARY KEY	,
District_Name VARCHAR(100)	,
Region VARCHAR(100)	,
No_of_inhabitants	INT,
No_of_municipalities_with_inhabitants_less_499 INT,
No_of_municipalities_with_inhabitants_500_btw_1999	INT,
No_of_municipalities_with_inhabitants_2000_btw_9999	INT,
No_of_municipalities_with_inhabitants_less_10000 INT,	
No_of_cities INT,
Ratio_of_urban_inhabitants FLOAT,
Average_salary INT,
No_of_entrepreneurs_per_1000_inhabitants INT,
No_committed_crime_2017	INT,
No_committed_crime_2018 INT
) ;

CREATE TABLE ACCOUNT(
account_id INT PRIMARY KEY,
district_id	INT,
frequency	VARCHAR(40),
`Date` DATE ,
Account_type VARCHAR(40),
FOREIGN KEY (district_id) references DISTRICT(District_Code) 
);

CREATE TABLE `ORDER`(
order_id	INT PRIMARY KEY,
account_id	INT,
bank_to	VARCHAR(45),
account_to	INT,
amount FLOAT,
FOREIGN KEY (account_id) references ACCOUNT(account_id)
);



CREATE TABLE LOAN(
loan_id	INT PRIMARY KEY,
account_id	INT,
`Date`	DATE,
amount	INT,
duration	INT,
payments	INT,
`status` VARCHAR(35),
FOREIGN KEY (account_id) references ACCOUNT(account_id)
);

CREATE TABLE TRANSACTIONS(
trans_id INT PRIMARY KEY,	
account_id	INT,
`Date`	DATE,
`Type`	VARCHAR(30),
operation	VARCHAR(40),
amount	INT,
balance	FLOAT,
Purpose	VARCHAR(40),
bank	VARCHAR(45),
`account` INT,
FOREIGN KEY (account_id) references ACCOUNT(account_id));

CREATE TABLE CLIENT(
client_id	INT PRIMARY KEY,
Sex	CHAR(10),
Birth_date	DATE,
district_id INT,
FOREIGN KEY (district_id) references DISTRICT(District_Code) 
);

CREATE TABLE DISPOSITION(
disp_id	INT PRIMARY KEY,
client_id INT,
account_id	INT,
`type` CHAR(15),
FOREIGN KEY (account_id) references ACCOUNT(account_id),
FOREIGN KEY (client_id) references CLIENT(client_id)
);

CREATE TABLE CARD(
card_id	INT PRIMARY KEY,
disp_id	INT,
`type` CHAR(10)	,
issued DATE,
FOREIGN KEY (disp_id) references DISPOSITION(disp_id)
);

SELECT * FROM DISTRICT;
SELECT * FROM ACCOUNT;
SELECT * FROM TRANSACTIONS;
SELECT * FROM DISPOSITION;
SELECT * FROM CARD;
SELECT * FROM `ORDER`;
SELECT * FROM LOAN;
SELECT * FROM CLIENT;

-----ADDING AGE COLUMN TO THE CLIENT TABLE
ALTER TABLE CLIENT
ADD COLUMN AGE INT;

UPDATE CLIENT
SET AGE = DATEDIFF('YEAR',BIRTH_DATE,'2022-12-31');


 
--DATA TRANSFORMATION (CLIENT REQUIREMENT)
/*
 CONVERT 2021 TXN_YEAR TO 2022
 CONVERT 2020 TXN_YEAR TO 2021
 CONVERT 2019 TXN_YEAR TO 2020
 CONVERT 2018 TXN_YEAR TO 2019
 CONVERT 2017 TXN_YEAR TO 2018
 CONVERT 2016 TXN_YEAR TO 2017
*/

-----CHECKING SOMETHING
 
 SELECT YEAR(`DATE`) AS TXN_YEAR,COUNT(*) TOT_TXN
 FROM TRANSACTIONS
 WHERE BANK IS NULL
 GROUP BY 1
 ORDER BY 1;

// YOU CAN USE DATEADD
/*
UPDATE TRANSACTIONS
SET `DATE` = DATEADD(YEAR,1,`DATE`)
WHERE `DATE` = 2016;
*/


//(OR) YOU CAN USE REPLACE 
SELECT REPLACE(`DATE`,2021,2022) FROM TRANSACTIONS

UPDATE TRANSACTIONS
SET `DATE` = REPLACE(`DATE`,2021,2022) 

UPDATE TRANSACTIONS
SET `DATE` = REPLACE(`DATE`,2020,2021)

UPDATE TRANSACTIONS
SET `DATE` = REPLACE(`DATE`,2019,2020)

UPDATE TRANSACTIONS
SET `DATE` = REPLACE(`DATE`,2018,2019)

UPDATE TRANSACTIONS
SET `DATE` = REPLACE(`DATE`,2017,2018)

UPDATE TRANSACTIONS
SET `DATE` = REPLACE(`DATE`,2016,2017)


---CHECKING AGAIN

SELECT MIN(`DATE`), MAX(`DATE`) FROM TRANSACTIONS;

 SELECT YEAR(`DATE`) AS TXN_YEAR,COUNT(*) TOT_TXN
 FROM TRANSACTIONS
 GROUP BY 1
 ORDER BY 1;
 
 /* REPLACE BANK NULL TO SPECIFIC BANK YEAR WISE
 
2022= 'Sky Bank' 
2021= 'DBS Bank' 
2019 = 'Northern Bank' 
2018 = 'Southern Bank' 
*/

-----CHECKING SOMETHING
SELECT * FROM TRANSACTIONS WHERE BANK IS NULL AND YEAR(`Date`) = '2022';
SELECT * FROM TRANSACTIONS WHERE BANK IS NULL AND YEAR(`Date`) = '2021';
SELECT * FROM TRANSACTIONS WHERE BANK IS NULL AND YEAR(`Date`) = '2020';
SELECT * FROM TRANSACTIONS WHERE BANK IS NULL AND YEAR(`Date`) = '2019';
SELECT * FROM TRANSACTIONS WHERE BANK IS NULL AND YEAR(`Date`) = '2018';
SELECT * FROM TRANSACTIONS WHERE BANK IS NULL AND YEAR(`Date`) = '2017';

--UPDATING NULL BANK
UPDATE TRANSACTIONS
SET BANK = 'Sky Bank' WHERE BANK IS NULL AND YEAR(`DATE`) = 2022;

UPDATE TRANSACTIONS
SET BANK = 'DBS Bank' WHERE BANK IS NULL AND YEAR(`DATE`) = 2021;

UPDATE TRANSACTIONS
SET BANK = 'Northern Bank' WHERE BANK IS NULL AND YEAR(`DATE`) = 2019;

UPDATE TRANSACTIONS
SET BANK = 'Southern Bank' WHERE BANK IS NULL AND YEAR(`DATE`) = 2018;

UPDATE TRANSACTIONS
SET BANK = 'ADB Bank' WHERE BANK IS NULL AND YEAR(`DATE`) = 2017;


SELECT * FROM TRANSACTIONS WHERE BANK IS NULL

----CHECKING TABLES
SELECT DISTINCT YEAR(ISSUED) FROM CARD

SELECT YEAR(`DATE`), COUNT(*) FROM ACCOUNT
GROUP BY 1
ORDER BY 1;


/*
 CONVERT 2021  TO 2022
 CONVERT 2020  TO 2021
 CONVERT 2019  TO 2020
 CONVERT 2018  TO 2019
 CONVERT 2017  TO 2018
 CONVERT 2016  TO 2017
*/

SELECT DISTINCT YEAR(ISSUED) FROM CARD


UPDATE CARD
SET ISSUED = DATEADD(YEAR,1 , ISSUED)
WHERE YEAR(ISSUED) = 2021;

UPDATE CARD
SET ISSUED = DATEADD(YEAR,1 , ISSUED)
WHERE YEAR(ISSUED) = 2020;

UPDATE CARD
SET ISSUED = DATEADD(YEAR,1 , ISSUED)
WHERE YEAR(ISSUED) = 2019;

UPDATE CARD
SET ISSUED = DATEADD(YEAR,1 , ISSUED)
WHERE YEAR(ISSUED) = 2018;

UPDATE CARD
SET ISSUED = DATEADD(YEAR,1 , ISSUED)
WHERE YEAR(ISSUED) = 2017;

UPDATE CARD
SET ISSUED = DATEADD(YEAR,1 , ISSUED)
WHERE YEAR(ISSUED) = 2016;


select YEAR(ISSUED),COUNT(*) AS TOTAL
FROM CARD
GROUP BY 1
ORDER BY 1;

----CHECKING SOMETHING

SELECT YEAR(`DATE`), COUNT(*) FROM ACCOUNT
GROUP BY 1
ORDER BY 1;




--1. What is the demographic profile of the bank's clients and how does it vary across districts?

CREATE OR REPLACE TABLE czec_demographic_data_kpi as
SELECT C.DISTRICT_ID,D.DISTRICT_NAME,D.AVERAGE_SALARY,
ROUND(AVG(C.AGE),0) AS AVG_AGE,
SUM(CASE WHEN SEX = 'Male' THEN 1 ELSE 0 END) AS MALE_CLIENT,
SUM(CASE WHEN SEX = 'Female' THEN 1 ELSE 0 END) AS FEMALE_CLIENT,
ROUND((MALE_CLIENT/FEMALE_CLIENT)*100,2) AS MALE_FEMALE_RATIO_PERC,
COUNT(*) AS TOTAL_CLIENT
FROM CLIENT C
INNER JOIN DISTRICT D ON C.DISTRICT_ID = D.DISTRICT_CODE
GROUP BY 1,2,3
ORDER BY 1;

/*
-----FINDING MALE ,FEMALE ((WHY CONVERTED TO 1? TO SUM IT))
SELECT 
SUM(CASE WHEN SEX = 'Male' THEN 1 END) AS MALE_CLIENT ,
SUM(CASE WHEN SEX = 'Female' THEN 1 END) AS FEMALE_CLIENT 
FROM CLIENT ;


-----FINDING MALE FEMALE % ((YOU CAN REMOVE ELSE PART))
SELECT 
SUM(CASE WHEN SEX = 'Male' THEN 1 ELSE 0 END)/COUNT(*)*100.0 AS MALE_PERC ,
SUM(CASE WHEN SEX = 'Female' THEN 1 ELSE 0 END)/COUNT(*)*100.0 AS FEMALE_PERC 
FROM CLIENT ;
*/

SELECT * FROM czec_demographic_data_kpi;

--2. How the banks have performed over the years. Give their detailed analysis month wise?

CREATE OR REPLACE TABLE ACC_LATEST_TXNS_WITH_BALANCE AS
SELECT LTD.*,TXN.BALANCE
FROM TRANSACTIONS AS TXN
INNER JOIN 
(SELECT ACCOUNT_ID, YEAR(`DATE`) AS TXN_YEAR,MONTH(`DATE`) AS TXN_MONTH, MAX(`DATE`) AS LATEST_TXN_DATE
 FROM TRANSACTIONS 
 GROUP BY 1,2,3
 ORDER BY 1,2,3
) AS LTD ON TXN.ACCOUNT_ID = LTD.ACCOUNT_ID AND TXN.`DATE` = LTD.LATEST_TXN_DATE
WHERE TXN.`TYPE` = 'Credit' -- this is the assumptions i am having : month end txn data is credit, credit = deposit money in bank.
ORDER BY TXN.ACCOUNT_ID,LTD.TXN_YEAR,LTD.TXN_MONTH;  

SELECT * FROM ACC_LATEST_TXNS_WITH_BALANCE;

SELECT LATEST_TXN_DATE,COUNT(*) AS TOT_TXNS
FROM ACC_LATEST_TXNS_WITH_BALANCE
GROUP BY 1
ORDER BY 2 DESC;

--CREATING BANKING KPI AS TABLE

CREATE OR REPLACE TABLE BANKING_KPI AS
SELECT ALWB.TXN_YEAR, ALWB.TXN_MONTH, T.BANK, A.ACCOUNT_TYPE,
COUNT(DISTINCT ALWB.ACCOUNT_ID) AS TOT_ACCOUNT,
COUNT(DISTINCT T.TRANS_ID) AS TOT_TXNS,
COUNT(CASE WHEN T.`TYPE` = 'Credit' THEN 1 END) AS DEPOSIT_COUNT,
COUNT(CASE WHEN T.`TYPE` = 'Withdrawal' THEN 1 END) AS WITHDRAWAL_COUNT,
SUM(ALWB.BALANCE) AS TOT_BALANCE,
ROUND((DEPOSIT_COUNT/TOT_TXNS)*100,2) AS DEPOSIT_PERC,
ROUND((WITHDRAWAL_COUNT/TOT_ACCOUNT)*100,2) AS WITHDRAWAL_PERC,
NVL(TOT_BALANCE/TOT_ACCOUNT,0) AS AVG_BALANCE,
ROUND(TOT_TXNS/TOT_ACCOUNT,0) AS TPA
FROM TRANSACTIONS AS T
INNER JOIN ACC_LATEST_TXNS_WITH_BALANCE AS ALWB ON T.ACCOUNT_ID = ALWB.ACCOUNT_ID
LEFT OUTER JOIN ACCOUNT AS A ON T.ACCOUNT_ID = A.ACCOUNT_ID
GROUP BY 1,2,3,4
ORDER BY 1,2,3,4;


SELECT * FROM BANKING_KPI

--Checking random thing

/*SELECT * FROM BANKING_KPI
ORDER BY txn_year,BANK;

SELECT * FROM BANKING_KPI
where txn_year =2019;

select TXN_YEAR,COUNT(*) AS TOTAL
FROM BANKING_KPI
GROUP BY 1
ORDER BY 2 DESC;

select TXN_YEAR, BANK, SUM(AVG_BALANCE) AS TOT_AVG_BALANCE
from BANKING_KPI
GROUP BY 1,2
ORDER BY TOT_AVG_BALANCE DESC;
*/
